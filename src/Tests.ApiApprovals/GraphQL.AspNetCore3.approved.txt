namespace GraphQL.AspNetCore3.Errors
{
    public class BatchedRequestsNotSupportedError : GraphQL.AspNetCore3.Errors.RequestError
    {
        public BatchedRequestsNotSupportedError() { }
    }
    public class InvalidContentTypeError : GraphQL.AspNetCore3.Errors.RequestError
    {
        public InvalidContentTypeError() { }
        public InvalidContentTypeError(string message) { }
    }
    public class JsonInvalidError : GraphQL.AspNetCore3.Errors.RequestError
    {
        public JsonInvalidError() { }
        public JsonInvalidError(System.Exception innerException) { }
    }
    public class QueryMissingError : GraphQL.AspNetCore3.Errors.RequestError
    {
        public QueryMissingError() { }
    }
    public class RequestError : GraphQL.ExecutionError
    {
        public RequestError(string message) { }
        public RequestError(string message, System.Exception? innerException) { }
    }
    public class WebSocketSubProtocolNotSupportedError : GraphQL.AspNetCore3.Errors.RequestError
    {
        public WebSocketSubProtocolNotSupportedError(System.Collections.Generic.IEnumerable<string> requestedSubProtocols) { }
    }
}
namespace GraphQL.AspNetCore3
{
    public class ExecutionResultActionResult : Microsoft.AspNetCore.Mvc.IActionResult
    {
        public ExecutionResultActionResult(GraphQL.ExecutionResult executionResult, System.Net.HttpStatusCode statusCode = 200) { }
        public System.Threading.Tasks.Task ExecuteResultAsync(Microsoft.AspNetCore.Mvc.ActionContext context) { }
    }
    public static class GraphQLBuilderExtensions
    {
        public static GraphQL.DI.IGraphQLBuilder AddUserContextBuilder<TUserContextBuilder>(this GraphQL.DI.IGraphQLBuilder builder, GraphQL.DI.ServiceLifetime serviceLifetime = 0)
            where TUserContextBuilder :  class, GraphQL.AspNetCore3.IUserContextBuilder { }
        public static GraphQL.DI.IGraphQLBuilder AddUserContextBuilder<TUserContext>(this GraphQL.DI.IGraphQLBuilder builder, System.Func<Microsoft.AspNetCore.Http.HttpContext, System.Threading.Tasks.Task<TUserContext>> creator)
            where TUserContext :  class, System.Collections.Generic.IDictionary<string, object?> { }
        public static GraphQL.DI.IGraphQLBuilder AddUserContextBuilder<TUserContext>(this GraphQL.DI.IGraphQLBuilder builder, System.Func<Microsoft.AspNetCore.Http.HttpContext, TUserContext> creator)
            where TUserContext :  class, System.Collections.Generic.IDictionary<string, object?> { }
        public static GraphQL.DI.IGraphQLBuilder AddWebSocketHandler(this GraphQL.DI.IGraphQLBuilder builder, System.Action<GraphQL.AspNetCore3.WebSockets.WebSocketHandlerOptions>? configure = null) { }
        public static GraphQL.DI.IGraphQLBuilder AddWebSocketHandler(this GraphQL.DI.IGraphQLBuilder builder, System.Action<GraphQL.AspNetCore3.WebSockets.WebSocketHandlerOptions, System.IServiceProvider>? configure) { }
        public static GraphQL.DI.IGraphQLBuilder AddWebSocketHandler<TWebSocketHandler>(this GraphQL.DI.IGraphQLBuilder builder)
            where TWebSocketHandler :  class, GraphQL.AspNetCore3.IWebSocketHandler { }
    }
    public class GraphQLEndpointConventionBuilder : Microsoft.AspNetCore.Builder.IEndpointConventionBuilder
    {
        public void Add(System.Action<Microsoft.AspNetCore.Builder.EndpointBuilder> convention) { }
    }
    public static class GraphQLHttpApplicationBuilderExtensions
    {
        public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseGraphQL(this Microsoft.AspNetCore.Builder.IApplicationBuilder builder, Microsoft.AspNetCore.Http.PathString path, System.Action<GraphQL.AspNetCore3.GraphQLHttpMiddlewareOptions>? configureMiddleware = null) { }
        public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseGraphQL(this Microsoft.AspNetCore.Builder.IApplicationBuilder builder, string path = "/graphql", System.Action<GraphQL.AspNetCore3.GraphQLHttpMiddlewareOptions>? configureMiddleware = null) { }
        public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseGraphQL<TMiddleware>(this Microsoft.AspNetCore.Builder.IApplicationBuilder builder, Microsoft.AspNetCore.Http.PathString path)
            where TMiddleware : GraphQL.AspNetCore3.GraphQLHttpMiddleware { }
        public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseGraphQL<TMiddleware>(this Microsoft.AspNetCore.Builder.IApplicationBuilder builder, string path = "/graphql")
            where TMiddleware : GraphQL.AspNetCore3.GraphQLHttpMiddleware { }
        public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseGraphQL<TSchema>(this Microsoft.AspNetCore.Builder.IApplicationBuilder builder, Microsoft.AspNetCore.Http.PathString path, System.Action<GraphQL.AspNetCore3.GraphQLHttpMiddlewareOptions>? configureMiddleware = null)
            where TSchema : GraphQL.Types.ISchema { }
        public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseGraphQL<TSchema>(this Microsoft.AspNetCore.Builder.IApplicationBuilder builder, string path = "/graphql", System.Action<GraphQL.AspNetCore3.GraphQLHttpMiddlewareOptions>? configureMiddleware = null)
            where TSchema : GraphQL.Types.ISchema { }
    }
    public static class GraphQLHttpEndpointRouteBuilderExtensions
    {
        public static GraphQL.AspNetCore3.GraphQLEndpointConventionBuilder MapGraphQL(this Microsoft.AspNetCore.Routing.IEndpointRouteBuilder endpoints, string pattern = "graphql", System.Action<GraphQL.AspNetCore3.GraphQLHttpMiddlewareOptions>? configureMiddleware = null) { }
        public static GraphQL.AspNetCore3.GraphQLEndpointConventionBuilder MapGraphQL<TSchema>(this Microsoft.AspNetCore.Routing.IEndpointRouteBuilder endpoints, string pattern = "graphql", System.Action<GraphQL.AspNetCore3.GraphQLHttpMiddlewareOptions>? configureMiddleware = null)
            where TSchema : GraphQL.Types.ISchema { }
        public static GraphQL.AspNetCore3.GraphQLEndpointConventionBuilder MapGraphQL<TSchema, TMiddleware>(this Microsoft.AspNetCore.Routing.IEndpointRouteBuilder endpoints, string pattern = "graphql")
            where TSchema : GraphQL.Types.ISchema
            where TMiddleware : GraphQL.AspNetCore3.GraphQLHttpMiddleware<TSchema> { }
    }
    public abstract class GraphQLHttpMiddleware
    {
        public GraphQLHttpMiddleware(Microsoft.AspNetCore.Http.RequestDelegate next, GraphQL.IGraphQLTextSerializer serializer, GraphQL.AspNetCore3.GraphQLHttpMiddlewareOptions options, System.Collections.Generic.IEnumerable<GraphQL.AspNetCore3.IWebSocketHandler>? webSocketHandlers = null) { }
        protected GraphQL.AspNetCore3.GraphQLHttpMiddlewareOptions Options { get; }
        protected virtual System.Threading.Tasks.ValueTask<System.Collections.Generic.IDictionary<string, object?>> BuildUserContextAsync(Microsoft.AspNetCore.Http.HttpContext context) { }
        protected abstract System.Threading.Tasks.Task<GraphQL.ExecutionResult> ExecuteRequestAsync(Microsoft.AspNetCore.Http.HttpContext context, GraphQL.Transport.GraphQLRequest request, System.IServiceProvider serviceProvider, System.Collections.Generic.IDictionary<string, object?> userContext);
        protected abstract System.Threading.Tasks.Task<GraphQL.ExecutionResult> ExecuteScopedRequestAsync(Microsoft.AspNetCore.Http.HttpContext context, GraphQL.Transport.GraphQLRequest request, System.Collections.Generic.IDictionary<string, object?> userContext);
        protected virtual System.Threading.Tasks.Task HandleBatchRequestAsync(Microsoft.AspNetCore.Http.HttpContext context, Microsoft.AspNetCore.Http.RequestDelegate next, System.Collections.Generic.IList<GraphQL.Transport.GraphQLRequest> gqlRequests) { }
        protected virtual System.Threading.Tasks.Task HandleBatchedRequestsNotSupportedAsync(Microsoft.AspNetCore.Http.HttpContext context, Microsoft.AspNetCore.Http.RequestDelegate next) { }
        protected virtual System.Threading.Tasks.Task HandleContentTypeCouldNotBeParsedErrorAsync(Microsoft.AspNetCore.Http.HttpContext context, Microsoft.AspNetCore.Http.RequestDelegate next) { }
        protected virtual System.Threading.Tasks.ValueTask<bool> HandleDeserializationErrorAsync(Microsoft.AspNetCore.Http.HttpContext context, Microsoft.AspNetCore.Http.RequestDelegate next, System.Exception exception) { }
        protected virtual System.Threading.Tasks.Task HandleInvalidContentTypeErrorAsync(Microsoft.AspNetCore.Http.HttpContext context, Microsoft.AspNetCore.Http.RequestDelegate next) { }
        protected virtual System.Threading.Tasks.Task HandleInvalidHttpMethodErrorAsync(Microsoft.AspNetCore.Http.HttpContext context, Microsoft.AspNetCore.Http.RequestDelegate next) { }
        protected virtual System.Threading.Tasks.Task HandleNoQueryErrorAsync(Microsoft.AspNetCore.Http.HttpContext context, Microsoft.AspNetCore.Http.RequestDelegate next) { }
        protected virtual System.Threading.Tasks.Task HandleRequestAsync(Microsoft.AspNetCore.Http.HttpContext context, Microsoft.AspNetCore.Http.RequestDelegate next, GraphQL.Transport.GraphQLRequest gqlRequest) { }
        protected virtual System.Threading.Tasks.Task HandleWebSocketAsync(Microsoft.AspNetCore.Http.HttpContext context, Microsoft.AspNetCore.Http.RequestDelegate next) { }
        protected virtual System.Threading.Tasks.Task HandleWebSocketSubProtocolNotSupportedAsync(Microsoft.AspNetCore.Http.HttpContext context, Microsoft.AspNetCore.Http.RequestDelegate next) { }
        public virtual System.Threading.Tasks.Task InvokeAsync(Microsoft.AspNetCore.Http.HttpContext context) { }
        protected virtual System.Threading.Tasks.Task WriteErrorResponseAsync(Microsoft.AspNetCore.Http.HttpContext context, System.Net.HttpStatusCode httpStatusCode, GraphQL.ExecutionError executionError) { }
        protected virtual System.Threading.Tasks.Task WriteErrorResponseAsync(Microsoft.AspNetCore.Http.HttpContext context, System.Net.HttpStatusCode httpStatusCode, string errorMessage) { }
        protected virtual System.Threading.Tasks.Task WriteJsonResponseAsync<TResult>(Microsoft.AspNetCore.Http.HttpContext context, System.Net.HttpStatusCode httpStatusCode, TResult result) { }
    }
    public class GraphQLHttpMiddlewareOptions
    {
        public GraphQLHttpMiddlewareOptions() { }
        public bool BatchedRequestsExecuteInParallel { get; set; }
        public bool EnableBatchedRequests { get; set; }
        public bool HandleGet { get; set; }
        public bool HandlePost { get; set; }
        public bool HandleWebSockets { get; set; }
        public bool ReadExtensionsFromQueryString { get; set; }
        public bool ReadQueryStringOnPost { get; set; }
        public bool ReadVariablesFromQueryString { get; set; }
        public bool ValidationErrorsReturnBadRequest { get; set; }
    }
    public class GraphQLHttpMiddleware<TSchema> : GraphQL.AspNetCore3.GraphQLHttpMiddleware
        where TSchema : GraphQL.Types.ISchema
    {
        public GraphQLHttpMiddleware(Microsoft.AspNetCore.Http.RequestDelegate next, GraphQL.IGraphQLTextSerializer serializer, GraphQL.IDocumentExecuter<TSchema> documentExecuter, Microsoft.Extensions.DependencyInjection.IServiceScopeFactory serviceScopeFactory, GraphQL.AspNetCore3.GraphQLHttpMiddlewareOptions options, Microsoft.Extensions.Hosting.IHostApplicationLifetime hostApplicationLifetime, System.Collections.Generic.IEnumerable<GraphQL.AspNetCore3.IWebSocketHandler<TSchema>>? webSocketHandlers) { }
        protected override System.Threading.Tasks.Task<GraphQL.ExecutionResult> ExecuteRequestAsync(Microsoft.AspNetCore.Http.HttpContext context, GraphQL.Transport.GraphQLRequest request, System.IServiceProvider serviceProvider, System.Collections.Generic.IDictionary<string, object?> userContext) { }
        protected override System.Threading.Tasks.Task<GraphQL.ExecutionResult> ExecuteScopedRequestAsync(Microsoft.AspNetCore.Http.HttpContext context, GraphQL.Transport.GraphQLRequest request, System.Collections.Generic.IDictionary<string, object?> userContext) { }
    }
    public sealed class HttpGetValidationRule : GraphQL.Validation.IValidationRule
    {
        public HttpGetValidationRule() { }
        public System.Threading.Tasks.ValueTask<GraphQL.Validation.INodeVisitor?> ValidateAsync(GraphQL.Validation.ValidationContext context) { }
    }
    public class HttpMethodValidationError : GraphQL.Validation.ValidationError
    {
        public HttpMethodValidationError(GraphQLParser.ROM originalQuery, GraphQLParser.AST.ASTNode node, string message) { }
    }
    public class HttpPostValidationRule : GraphQL.Validation.IValidationRule
    {
        public HttpPostValidationRule() { }
        public System.Threading.Tasks.ValueTask<GraphQL.Validation.INodeVisitor?> ValidateAsync(GraphQL.Validation.ValidationContext context) { }
    }
    public interface IUserContextBuilder
    {
        System.Threading.Tasks.ValueTask<System.Collections.Generic.IDictionary<string, object?>> BuildUserContextAsync(Microsoft.AspNetCore.Http.HttpContext context);
    }
    public interface IWebSocketHandler
    {
        System.Collections.Generic.IEnumerable<string> SupportedSubProtocols { get; }
        System.Threading.Tasks.Task ExecuteAsync(Microsoft.AspNetCore.Http.HttpContext httpContext, System.Net.WebSockets.WebSocket webSocket, string subProtocol, System.Collections.Generic.IDictionary<string, object?> userContext);
    }
    public interface IWebSocketHandler<TSchema> : GraphQL.AspNetCore3.IWebSocketHandler
        where TSchema : GraphQL.Types.ISchema { }
    public class UserContextBuilder<TUserContext> : GraphQL.AspNetCore3.IUserContextBuilder
        where TUserContext : System.Collections.Generic.IDictionary<string, object?>
    {
        public UserContextBuilder(System.Func<Microsoft.AspNetCore.Http.HttpContext, System.Threading.Tasks.ValueTask<TUserContext>> func) { }
        public UserContextBuilder(System.Func<Microsoft.AspNetCore.Http.HttpContext, TUserContext> func) { }
        public System.Threading.Tasks.ValueTask<System.Collections.Generic.IDictionary<string, object?>> BuildUserContextAsync(Microsoft.AspNetCore.Http.HttpContext context) { }
    }
}
namespace GraphQL.AspNetCore3.WebSockets
{
    public abstract class BaseSubscriptionServer : GraphQL.AspNetCore3.WebSockets.IOperationMessageProcessor, System.IDisposable
    {
        public BaseSubscriptionServer(GraphQL.AspNetCore3.WebSockets.IWebSocketConnection sendStream, GraphQL.AspNetCore3.WebSockets.WebSocketHandlerOptions options) { }
        protected System.Threading.CancellationToken CancellationToken { get; }
        protected GraphQL.AspNetCore3.WebSockets.IWebSocketConnection Client { get; }
        protected virtual System.TimeSpan DefaultConnectionTimeout { get; }
        protected virtual System.TimeSpan DefaultKeepAliveTimeout { get; }
        protected bool Initialized { get; }
        protected GraphQL.AspNetCore3.WebSockets.SubscriptionList Subscriptions { get; }
        public virtual void Dispose() { }
        protected virtual System.Threading.Tasks.Task ErrorConnectionInitializationTimeoutAsync() { }
        protected virtual System.Threading.Tasks.Task ErrorIdAlreadyExistsAsync(GraphQL.Transport.OperationMessage message) { }
        protected virtual System.Threading.Tasks.Task ErrorIdCannotBeBlankAsync(GraphQL.Transport.OperationMessage message) { }
        protected virtual System.Threading.Tasks.Task ErrorNotInitializedAsync(GraphQL.Transport.OperationMessage message) { }
        protected virtual System.Threading.Tasks.Task ErrorTooManyInitializationRequestsAsync(GraphQL.Transport.OperationMessage message) { }
        protected virtual System.Threading.Tasks.Task ErrorUnrecognizedMessageAsync(GraphQL.Transport.OperationMessage message) { }
        protected abstract System.Threading.Tasks.Task<GraphQL.ExecutionResult> ExecuteRequestAsync(GraphQL.Transport.OperationMessage message);
        protected virtual System.Threading.Tasks.Task<GraphQL.ExecutionError> HandleErrorDuringSubscribeAsync(GraphQL.Transport.OperationMessage message, System.Exception ex) { }
        protected virtual System.Threading.Tasks.Task<GraphQL.ExecutionError> HandleErrorFromSourceAsync(System.Exception exception) { }
        public virtual System.Threading.Tasks.Task InitializeConnectionAsync() { }
        protected virtual System.Threading.Tasks.Task OnCloseConnectionAsync() { }
        protected abstract System.Threading.Tasks.Task OnConnectionAcknowledgeAsync(GraphQL.Transport.OperationMessage message);
        protected virtual System.Threading.Tasks.Task OnConnectionInitAsync(GraphQL.Transport.OperationMessage message, bool smartKeepAlive) { }
        protected virtual System.Threading.Tasks.Task OnConnectionInitWaitTimeoutAsync() { }
        public abstract System.Threading.Tasks.Task OnMessageReceivedAsync(GraphQL.Transport.OperationMessage message);
        protected abstract System.Threading.Tasks.Task OnSendKeepAliveAsync();
        protected abstract System.Threading.Tasks.Task SendCompletedAsync(string id);
        protected abstract System.Threading.Tasks.Task SendDataAsync(string id, GraphQL.ExecutionResult result);
        protected virtual System.Threading.Tasks.Task SendErrorResultAsync(GraphQL.Transport.OperationMessage message, GraphQL.ExecutionError executionError) { }
        protected virtual System.Threading.Tasks.Task SendErrorResultAsync(GraphQL.Transport.OperationMessage message, GraphQL.ExecutionResult result) { }
        protected virtual System.Threading.Tasks.Task SendErrorResultAsync(string id, GraphQL.ExecutionError executionError) { }
        protected abstract System.Threading.Tasks.Task SendErrorResultAsync(string id, GraphQL.ExecutionResult result);
        protected virtual System.Threading.Tasks.Task SendSingleResultAsync(GraphQL.Transport.OperationMessage message, GraphQL.ExecutionResult result) { }
        protected virtual System.Threading.Tasks.Task SubscribeAsync(GraphQL.Transport.OperationMessage message, bool overwrite) { }
        protected bool TryInitialize() { }
        protected virtual System.Threading.Tasks.Task UnsubscribeAsync(string? id) { }
    }
    public interface IOperationMessageProcessor : System.IDisposable
    {
        System.Threading.Tasks.Task InitializeConnectionAsync();
        System.Threading.Tasks.Task OnMessageReceivedAsync(GraphQL.Transport.OperationMessage message);
    }
    public interface IWebSocketConnection
    {
        System.DateTime LastMessageSentAt { get; }
        System.Threading.CancellationToken RequestAborted { get; }
        System.Threading.Tasks.Task CloseConnectionAsync();
        System.Threading.Tasks.Task CloseConnectionAsync(int eventId, string? description);
        System.Threading.Tasks.Task ExecuteAsync(GraphQL.AspNetCore3.WebSockets.IOperationMessageProcessor operationMessageProcessor);
        System.Threading.Tasks.Task SendMessageAsync(GraphQL.Transport.OperationMessage message);
    }
    public sealed class SubscriptionList : System.IDisposable
    {
        public SubscriptionList(System.Threading.CancellationToken cancellationToken) { }
        public System.IDisposable this[string id] { set; }
        public bool CompareExchange(string id, System.IDisposable oldSubscription, System.IDisposable newSubscription) { }
        public bool Contains(string id) { }
        public bool Contains(string id, System.IDisposable subscription) { }
        public void Dispose() { }
        public bool TryAdd(string id, System.IDisposable subscription) { }
        public bool TryRemove(string id) { }
        public bool TryRemove(string id, System.IDisposable oldSubscription) { }
    }
    public class WebSocketConnection : GraphQL.AspNetCore3.WebSockets.IWebSocketConnection
    {
        public WebSocketConnection(System.Net.WebSockets.WebSocket webSocket, GraphQL.IGraphQLSerializer serializer, GraphQL.AspNetCore3.WebSockets.WebSocketHandlerOptions options, System.Threading.CancellationToken cancellationToken) { }
        protected virtual System.TimeSpan DefaultDisconnectionTimeout { get; }
        public System.DateTime LastMessageSentAt { get; }
        public System.Threading.CancellationToken RequestAborted { get; }
        public System.Threading.Tasks.Task CloseConnectionAsync() { }
        public System.Threading.Tasks.Task CloseConnectionAsync(int eventId, string? description) { }
        public virtual System.Threading.Tasks.Task ExecuteAsync(GraphQL.AspNetCore3.WebSockets.IOperationMessageProcessor operationMessageProcessor) { }
        protected virtual System.Threading.Tasks.Task OnCloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus closeStatus, string? closeDescription) { }
        protected virtual System.Threading.Tasks.Task OnDispatchMessageAsync(GraphQL.AspNetCore3.WebSockets.IOperationMessageProcessor operationMessageProcessor, GraphQL.Transport.OperationMessage message) { }
        protected virtual System.Threading.Tasks.Task OnSendMessageAsync(GraphQL.Transport.OperationMessage message) { }
        public System.Threading.Tasks.Task SendMessageAsync(GraphQL.Transport.OperationMessage message) { }
    }
    public class WebSocketHandler : GraphQL.AspNetCore3.IWebSocketHandler
    {
        public WebSocketHandler(GraphQL.IGraphQLSerializer serializer, GraphQL.IDocumentExecuter executer, Microsoft.Extensions.DependencyInjection.IServiceScopeFactory serviceScopeFactory, GraphQL.AspNetCore3.WebSockets.WebSocketHandlerOptions webSocketHandlerOptions, Microsoft.Extensions.Hosting.IHostApplicationLifetime hostApplicationLifetime) { }
        protected GraphQL.AspNetCore3.WebSockets.WebSocketHandlerOptions Options { get; }
        public virtual System.Collections.Generic.IEnumerable<string> SupportedSubProtocols { get; }
        protected virtual GraphQL.AspNetCore3.WebSockets.IOperationMessageProcessor CreateReceiveStream(GraphQL.AspNetCore3.WebSockets.IWebSocketConnection webSocketConnection, string subProtocol, System.Collections.Generic.IDictionary<string, object?> userContext) { }
        protected virtual GraphQL.AspNetCore3.WebSockets.IWebSocketConnection CreateWebSocketConnection(System.Net.WebSockets.WebSocket webSocket, System.Threading.CancellationToken cancellationToken) { }
        public virtual System.Threading.Tasks.Task ExecuteAsync(Microsoft.AspNetCore.Http.HttpContext httpContext, System.Net.WebSockets.WebSocket webSocket, string subProtocol, System.Collections.Generic.IDictionary<string, object?> userContext) { }
    }
    public class WebSocketHandlerOptions
    {
        public WebSocketHandlerOptions() { }
        public System.TimeSpan? ConnectionInitWaitTimeout { get; set; }
        public bool DisconnectAfterAnyError { get; set; }
        public bool DisconnectAfterErrorEvent { get; set; }
        public System.TimeSpan? DisconnectionTimeout { get; set; }
        public System.TimeSpan? KeepAliveTimeout { get; set; }
    }
    public class WebSocketHandler<TSchema> : GraphQL.AspNetCore3.WebSockets.WebSocketHandler, GraphQL.AspNetCore3.IWebSocketHandler, GraphQL.AspNetCore3.IWebSocketHandler<TSchema>
        where TSchema : GraphQL.Types.ISchema
    {
        public WebSocketHandler(GraphQL.IGraphQLSerializer serializer, GraphQL.IDocumentExecuter<TSchema> executer, Microsoft.Extensions.DependencyInjection.IServiceScopeFactory serviceScopeFactory, GraphQL.AspNetCore3.WebSockets.WebSocketHandlerOptions options, Microsoft.Extensions.Hosting.IHostApplicationLifetime hostApplicationLifetime) { }
    }
}
namespace GraphQL.AspNetCore3.WebSockets.GraphQLWs
{
    public static class MessageType
    {
        public const string Complete = "complete";
        public const string ConnectionAck = "connection_ack";
        public const string ConnectionInit = "connection_init";
        public const string Error = "error";
        public const string Next = "next";
        public const string Ping = "ping";
        public const string Pong = "pong";
        public const string Subscribe = "subscribe";
    }
    public class SubscriptionServer : GraphQL.AspNetCore3.WebSockets.BaseSubscriptionServer
    {
        public const string SubProtocol = "graphql-transport-ws";
        public SubscriptionServer(GraphQL.AspNetCore3.WebSockets.IWebSocketConnection sendStream, GraphQL.AspNetCore3.WebSockets.WebSocketHandlerOptions options, GraphQL.IDocumentExecuter executer, GraphQL.IGraphQLSerializer serializer, Microsoft.Extensions.DependencyInjection.IServiceScopeFactory serviceScopeFactory, System.Collections.Generic.IDictionary<string, object?> userContext) { }
        protected GraphQL.IDocumentExecuter DocumentExecuter { get; }
        protected GraphQL.IGraphQLSerializer Serializer { get; }
        protected Microsoft.Extensions.DependencyInjection.IServiceScopeFactory ServiceScopeFactory { get; }
        protected System.Collections.Generic.IDictionary<string, object?> UserContext { get; }
        protected override System.Threading.Tasks.Task<GraphQL.ExecutionResult> ExecuteRequestAsync(GraphQL.Transport.OperationMessage message) { }
        protected virtual System.Threading.Tasks.Task OnCompleteAsync(GraphQL.Transport.OperationMessage message) { }
        protected override System.Threading.Tasks.Task OnConnectionAcknowledgeAsync(GraphQL.Transport.OperationMessage message) { }
        public override System.Threading.Tasks.Task OnMessageReceivedAsync(GraphQL.Transport.OperationMessage message) { }
        protected virtual System.Threading.Tasks.Task OnPingAsync(GraphQL.Transport.OperationMessage message) { }
        protected virtual System.Threading.Tasks.Task OnPongAsync(GraphQL.Transport.OperationMessage message) { }
        protected override System.Threading.Tasks.Task OnSendKeepAliveAsync() { }
        protected virtual System.Threading.Tasks.Task OnSubscribeAsync(GraphQL.Transport.OperationMessage message) { }
        protected override System.Threading.Tasks.Task SendCompletedAsync(string id) { }
        protected override System.Threading.Tasks.Task SendDataAsync(string id, GraphQL.ExecutionResult result) { }
        protected override System.Threading.Tasks.Task SendErrorResultAsync(string id, GraphQL.ExecutionResult result) { }
    }
}
namespace GraphQL.AspNetCore3.WebSockets.SubscriptionsTransportWs
{
    public static class MessageType
    {
        public const string GQL_COMPLETE = "complete";
        public const string GQL_CONNECTION_ACK = "connection_ack";
        public const string GQL_CONNECTION_ERROR = "connection_error";
        public const string GQL_CONNECTION_INIT = "connection_init";
        public const string GQL_CONNECTION_KEEP_ALIVE = "ka";
        public const string GQL_CONNECTION_TERMINATE = "connection_terminate";
        public const string GQL_DATA = "data";
        public const string GQL_ERROR = "error";
        public const string GQL_START = "start";
        public const string GQL_STOP = "stop";
    }
    public class SubscriptionServer : GraphQL.AspNetCore3.WebSockets.BaseSubscriptionServer
    {
        public const string SubProtocol = "graphql-ws";
        public SubscriptionServer(GraphQL.AspNetCore3.WebSockets.IWebSocketConnection sendStream, GraphQL.AspNetCore3.WebSockets.WebSocketHandlerOptions options, GraphQL.IDocumentExecuter executer, GraphQL.IGraphQLSerializer serializer, Microsoft.Extensions.DependencyInjection.IServiceScopeFactory serviceScopeFactory, System.Collections.Generic.IDictionary<string, object?> userContext) { }
        protected GraphQL.IDocumentExecuter DocumentExecuter { get; }
        protected GraphQL.IGraphQLSerializer Serializer { get; }
        protected Microsoft.Extensions.DependencyInjection.IServiceScopeFactory ServiceScopeFactory { get; }
        protected System.Collections.Generic.IDictionary<string, object?> UserContext { get; }
        protected override System.Threading.Tasks.Task<GraphQL.ExecutionResult> ExecuteRequestAsync(GraphQL.Transport.OperationMessage message) { }
        protected override System.Threading.Tasks.Task OnConnectionAcknowledgeAsync(GraphQL.Transport.OperationMessage message) { }
        public override System.Threading.Tasks.Task OnMessageReceivedAsync(GraphQL.Transport.OperationMessage message) { }
        protected override System.Threading.Tasks.Task OnSendKeepAliveAsync() { }
        protected virtual System.Threading.Tasks.Task OnStartAsync(GraphQL.Transport.OperationMessage message) { }
        protected virtual System.Threading.Tasks.Task OnStopAsync(GraphQL.Transport.OperationMessage message) { }
        protected override System.Threading.Tasks.Task SendCompletedAsync(string id) { }
        protected override System.Threading.Tasks.Task SendDataAsync(string id, GraphQL.ExecutionResult result) { }
        protected override System.Threading.Tasks.Task SendErrorResultAsync(string id, GraphQL.ExecutionResult result) { }
    }
}
